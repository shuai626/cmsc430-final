#lang racket
(provide test-runner test-runner-io)
(require rackunit)

(define (test-runner run) 
  ;; Abscond examples
  (check-equal? (run 7) 7)
  (check-equal? (run -8) -8)

  ;; Blackmail examples
  (check-equal? (run '(add1 (add1 7))) 9)
  (check-equal? (run '(add1 (sub1 7))) 7)

  ;; Con examples
  (check-equal? (run '(if (zero? 0) 1 2)) 1)
  (check-equal? (run '(if (zero? 1) 1 2)) 2)
  (check-equal? (run '(if (zero? -7) 1 2)) 2)
  (check-equal? (run '(if (zero? 0)
                          (if (zero? 1) 1 2)
                          7))
                2)
  (check-equal? (run '(if (zero? (if (zero? 0) 1 0))
                          (if (zero? 1) 1 2)
                          7))
                7)

  ;; Dupe examples
  (check-equal? (run #t) #t)
  (check-equal? (run #f) #f)
  (check-equal? (run (if #t 1 2)) 1)
  (check-equal? (run (if #f 1 2)) 2)
  (check-equal? (run (if 0 1 2)) 1)
  (check-equal? (run '(if #t 3 4)) 3)
  (check-equal? (run '(if #f 3 4)) 4)
  (check-equal? (run '(if  0 3 4)) 3)
  (check-equal? (run '(zero? 4)) #f)
  (check-equal? (run '(zero? 0)) #t)  
  ;; Dodger examples
  (check-equal? (run #\a) #\a)
  (check-equal? (run #\b) #\b)
  (check-equal? (run '(char? #\a)) #t)
  (check-equal? (run '(char? #t)) #f)  
  (check-equal? (run '(char? 8)) #f) 
  (check-equal? (run '(char->integer #\a)) (char->integer #\a))
  (check-equal? (run '(integer->char 955)) #\Î»)  
  ;; Extort examples
  (check-equal? (run '(add1 #f)) 'err)
  (check-equal? (run '(sub1 #f)) 'err)
  (check-equal? (run '(zero? #f)) 'err)
  (check-equal? (run '(char->integer #f)) 'err)
  (check-equal? (run '(integer->char #f)) 'err)
  (check-equal? (run '(integer->char -1)) 'err)
  (check-equal? (run '(write-byte #f)) 'err)
  (check-equal? (run '(write-byte -1)) 'err)
  (check-equal? (run '(write-byte 256)) 'err)
  ;; Fraud examples
  (check-equal? (run '(let ((x 7)) x)) 7)
  (check-equal? (run '(let ((x 7)) 2)) 2)
  (check-equal? (run '(let ((x 7)) (add1 x))) 8)
  (check-equal? (run '(let ((x (add1 7))) x)) 8)
  (check-equal? (run '(let ((x 7)) (let ((y 2)) x))) 7)
  (check-equal? (run '(let ((x 7)) (let ((x 2)) x))) 2)
  (check-equal? (run '(let ((x 7)) (let ((x (add1 x))) x))) 8)

  (check-equal? (run '(let ((x 0))
                        (if (zero? x) 7 8)))
                7)
  (check-equal? (run '(let ((x 1))
                        (add1 (if (zero? x) 7 8))))
                9)
  (check-equal? (run '(+ 3 4)) 7)
  (check-equal? (run '(- 3 4)) -1)
  (check-equal? (run '(+ (+ 2 1) 4)) 7)
  (check-equal? (run '(+ (+ 2 1) (+ 2 2))) 7)
  (check-equal? (run '(let ((x (+ 1 2)))
                        (let ((z (- 4 x)))
                          (+ (+ x x) z))))
                7)
  ;; Hustle examples  
  (check-equal? (run ''()) '())  
  (check-equal? (run '(box 1)) (box 1))
  (check-equal? (run '(cons 1 2)) (cons 1 2))
  (check-equal? (run '(unbox (box 1))) 1)
  (check-equal? (run '(car (cons 1 2))) 1)
  (check-equal? (run '(cdr (cons 1 2))) 2)
  (check-equal? (run '(cons 1 '())) (list 1))
  (check-equal? (run '(let ((x (cons 1 2)))
                        (begin (cdr x)
                               (car x))))
                1)
  (check-equal? (run '(let ((x (cons 1 2)))
                        (let ((y (box 3)))
                          (unbox y))))
                3)


  ;; Hustle+Rgx examples
  (check-equal? (run '(regexp-match-exact? "" "a")) #f)
  (check-equal? (run '(regexp-match-exact? "" "")) #t)

  (check-equal? (run '(regexp-match-exact? "." "a")) #t)
  (check-equal? (run '(regexp-match-exact? "." "b")) #t)
  (check-equal? (run '(regexp-match-exact? "." "bb")) #f)

  (check-equal? (run '(regexp-match-exact? "a" "a")) #t)
  (check-equal? (run '(regexp-match-exact? "a" "b")) #f)

  (check-equal? (run '(regexp-match-exact? "a|b" "a")) #t)
  (check-equal? (run '(regexp-match-exact? "a|b" "b")) #t)
  (check-equal? (run '(regexp-match-exact? "a|b" "c")) #f)

  (check-equal? (run '(regexp-match-exact? "a|b|c" "a")) #t)
  (check-equal? (run '(regexp-match-exact? "a|b|c" "b")) #t)
  (check-equal? (run '(regexp-match-exact? "a|b|c" "c")) #t)
  (check-equal? (run '(regexp-match-exact? "a|b|c" "d")) #f)

  (check-equal? (run '(regexp-match-exact? "abcaa" "abcaa")) #t)
  (check-equal? (run '(regexp-match-exact? "abcaa" "abca")) #f)

  (check-equal? (run '(regexp-match-exact? "a*" "a")) #t)
  (check-equal? (run '(regexp-match-exact? "a*" "aaaaa")) #t)
  (check-equal? (run '(regexp-match-exact? "a*" "aaaaaaaaab")) #f)
  (check-equal? (run '(regexp-match-exact? "a*b" "aaaaaaaaab")) #t)

  (check-equal? (run '(regexp-match-exact? "a?" "")) #t)
  (check-equal? (run '(regexp-match-exact? "a?" "a")) #t)
  (check-equal? (run '(regexp-match-exact? "a?" "b")) #f)
  
  (check-equal? (run '(regexp-match-exact? "(.a|bc)*" "bcbcbcda")) #t)
  (check-equal? (run '(regexp-match-exact? "(.ce|bc)" "ace")) #t)
  (check-equal? (run '(regexp-match-exact? "(.ce|bc)" "bc")) #t)

  (check-equal? (run '(regexp-match-exact? "(a|b)*" "abbaaabbababa")) #t)

  (check-equal? (run '(regexp-match? "" "a")) #t)
  (check-equal? (run '(regexp-match? "" "")) #t)

  (check-equal? (run '(regexp-match? "." "a")) #t)
  (check-equal? (run '(regexp-match? "." "b")) #t)
  (check-equal? (run '(regexp-match? "." "bb")) #t)

  (check-equal? (run '(regexp-match? "a" "a")) #t)
  (check-equal? (run '(regexp-match? "a" "paw")) #t)
  (check-equal? (run '(regexp-match? "a" "b")) #f)

  (check-equal? (run '(regexp-match? "a|b" "a")) #t)
  (check-equal? (run '(regexp-match? "a|b" "bad")) #t)
  (check-equal? (run '(regexp-match? "a|b" "b")) #t)
  (check-equal? (run '(regexp-match? "a|b" "bbbbbba")) #t)
  (check-equal? (run '(regexp-match? "a|b" "ddddddda")) #t)
  (check-equal? (run '(regexp-match? "a|b" "pad")) #t)
  (check-equal? (run '(regexp-match? "a|b" "c")) #f)

  (check-equal? (run '(regexp-match? "abcaa" "abcaa")) #t)
  (check-equal? (run '(regexp-match? "abcaa" "bbbabcaabbb")) #t)
  (check-equal? (run '(regexp-match? "abcaa" "abca")) #f)

  (check-equal? (run '(regexp-match? "a*" "a")) #t)
  (check-equal? (run '(regexp-match? "a*" "")) #t)
  (check-equal? (run '(regexp-match? "a*" "aaaaa")) #t)
  (check-equal? (run '(regexp-match? "a*" "aaaaaaaaab")) #t)
  (check-equal? (run '(regexp-match? "a*b" "b")) #t)
  (check-equal? (run '(regexp-match? "a*b" "aaaaaaaaab")) #t)
  (check-equal? (run '(regexp-match? "a*b" "ddddddddb")) #t)
  (check-equal? (run '(regexp-match? "a*b" "dddddddd")) #f)

  (check-equal? (run '(regexp-match? "a?" "")) #t)
  (check-equal? (run '(regexp-match? "a?" "a")) #t)
  (check-equal? (run '(regexp-match? "a?" "bbbabbb")) #t)
  (check-equal? (run '(regexp-match? "a?" "b")) #t)
  
  (check-equal? (run '(regexp-match? "a+" "a")) #t)
  (check-equal? (run '(regexp-match? "a+" "")) #f)
  (check-equal? (run '(regexp-match? "a+" "aaaaa")) #t)
  (check-equal? (run '(regexp-match? "a+" "aaaaaaaaab")) #t)
  (check-equal? (run '(regexp-match? "a+b" "b")) #f)
  (check-equal? (run '(regexp-match? "a+b" "aaaaaaaaab")) #t)

  (check-equal? (run '(regexp-match? "(.a|bc)*" "bcbcbcda")) #t)
  (check-equal? (run '(regexp-match? "(.ce|bc)" "ace")) #t)
  (check-equal? (run '(regexp-match? "(.ce|bc)" "bc")) #t)

  (check-equal? (run '(regexp-match? "(a|b)*" "abbaaabbababa")) #t)

  (check-equal? (run '(let ((x "OKAY123")) (regexp-match? "KAY" x))) #t)
  (check-equal? (run '(let ((x "OKAY123")) (let ((y "OKAY123")) (regexp-match? "KAY" x)))) #t)
  (check-equal? (run '(let ((x "OKAY123")) (let ((y "OKAY123"))
                        (if (regexp-match? "KAY" x) (regexp-match? "false" y) #t)))) #f)

  (check-equal? (run '(regexp-match? "^$" "")) #t)
  (check-equal? (run '(regexp-match? "^" "ace")) #t)
  (check-equal? (run '(regexp-match? "$" "bc")) #t)
  (check-equal? (run '(regexp-match? "^hello$" "hello")) #t)
  (check-equal? (run '(regexp-match? "^hello$" "helloooo")) #f)
  (check-equal? (run '(regexp-match? "^hello" "hellothere")) #t)
  (check-equal? (run '(regexp-match? "^.*xyz" "xyz430")) #t)
  (check-equal? (run '(regexp-match? "^.*xyz" "abcdefghixyz123")) #t)
  (check-equal? (run '(regexp-match? "(ab|c)*hello$" "cmsc430abacbacchello")) #t)

  (check-equal? (run '(regexp-match? "[a-z]+hello$" "randomlettershahahello")) #t)
  (check-equal? (run '(regexp-match? "[0-9]+[B-F]+[g-hC-H2-3]*$" "012394CCCDgF2")) #t)
  (check-equal? (run '(regexp-match? "[0-9]+[B-F]+[g-hC-H2-3]*$" "012394CCCDgA2")) #f)
  (check-equal? (run '(regexp-match? "[0-9]+[B-F]+[g-hC-H2-3]*$" "012394CCCDaF2")) #f)
  (check-equal? (run '(regexp-match? "[0-9]+[B-F]+[g-hC-H2-3]*$" "012394CCADgF2")) #f)
  (check-equal? (run '(regexp-match? "[0-9]+[B-F]+[g-hC-H2-3]*$" "012394CCCDgF4")) #f)
  (check-equal? (run '(regexp-match? "[a-z]+hello$" "randomlettershahaZhello")) #f)

  (check-equal? (run '(regexp-match-exact? "(a|b){5}" "aabab")) #t)
  (check-equal? (run '(regexp-match-exact? "(a|b){5}" "aabaab")) #f)
  (check-equal? (run '(regexp-match-exact? "(a|b){5}" "aaab")) #f)
  (check-equal? (run '(regexp-match-exact? "(a|b){5}" "aaabc")) #f)
  (check-equal? (run '(regexp-match-exact? "[abc]{,5}" "")) #t)
  (check-equal? (run '(regexp-match-exact? "[abc]{,5}" "abc")) #t)
  (check-equal? (run '(regexp-match-exact? "[abc]{,5}" "aabbc")) #t)
  (check-equal? (run '(regexp-match-exact? "[abc]{,5}" "aabbd")) #f)
  (check-equal? (run '(regexp-match-exact? "[abc]{,5}" "aabbcc")) #f)
  (check-equal? (run '(regexp-match-exact? "[abc]{2,}" "ab")) #t)
  (check-equal? (run '(regexp-match-exact? "[abc]{2,}" "aaaaabbbbbbbccccccc")) #t)
  (check-equal? (run '(regexp-match-exact? "[abc]{2,}" "a")) #f)
  (check-equal? (run '(regexp-match-exact? "[abc]{}" "")) #t)
  (check-equal? (run '(regexp-match-exact? "[abc]{}" "aaaaaaaabbbbbbbbcccccc")) #t)
  (check-equal? (run '(regexp-match-exact? "a{5,7}" "aaaaa")) #t)
  (check-equal? (run '(regexp-match-exact? "a{5,7}" "aaaaaa")) #t)
  (check-equal? (run '(regexp-match-exact? "a{5,7}" "aaaaaaa")) #t)
  (check-equal? (run '(regexp-match-exact? "a{5,7}" "aaaa")) #f)
  (check-equal? (run '(regexp-match-exact? "a{5,7}" "aaaaaaaaaaaa")) #f)
)  

(define (test-runner-io run)
  ;; Evildoer examples
  (check-equal? (run 7 "") (cons 7 ""))
  (check-equal? (run '(write-byte 97) "") (cons (void) "a"))
  (check-equal? (run '(read-byte) "a") (cons 97 ""))
  (check-equal? (run '(begin (write-byte 97) (read-byte)) "b")
                (cons 98 "a"))
  (check-equal? (run '(read-byte) "") (cons eof ""))
  (check-equal? (run '(eof-object? (read-byte)) "") (cons #t ""))
  (check-equal? (run '(eof-object? (read-byte)) "a") (cons #f ""))
  (check-equal? (run '(begin (write-byte 97) (write-byte 98)) "")
                (cons (void) "ab"))

  (check-equal? (run '(peek-byte) "ab") (cons 97 ""))
  (check-equal? (run '(begin (peek-byte) (read-byte)) "ab") (cons 97 ""))
  ;; Extort examples
  (check-equal? (run '(write-byte #t) "") (cons 'err ""))

  ;; Fraud examples
  (check-equal? (run '(let ((x 97)) (write-byte x)) "") (cons (void) "a"))
  (check-equal? (run '(let ((x 97))
                        (begin (write-byte x)
                               x))
                     "")
                (cons 97 "a"))
  (check-equal? (run '(let ((x 97)) (begin (read-byte) x)) "b")
                (cons 97 ""))
  (check-equal? (run '(let ((x 97)) (begin (peek-byte) x)) "b")
                (cons 97 ""))

  ;; Hustle examples
  (check-equal? (run '(let ((x 1))
                        (begin (write-byte 97)
                               1))
                     "")
                (cons 1 "a"))

  (check-equal? (run '(let ((x 1))
                        (let ((y 2))
                          (begin (write-byte 97)
                                 1)))
                     "")
                (cons 1 "a"))

  (check-equal? (run '(let ((x (cons 1 2)))
                        (begin (write-byte 97)
                               (car x)))
                     "")
                (cons 1 "a"))

  )
